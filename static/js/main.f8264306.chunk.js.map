{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/NavBar/NavBar.js","components/Footer/Footer.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","onClick","clickedImage","alt","name","src","image","Wrapper","children","NavBar","scores","topMessage","score","topScore","Footer","href","Header","App","state","friends","clicked","includes","id","push","setState","prevState","this","sort","a","b","Math","random","map","item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"irDAYeA,G,MATI,SAAAC,GAAK,OACtB,yBAAKC,UAAU,cAAcC,QAAS,kBAAKF,EAAMG,aAAaH,KAC5D,yBAAKC,UAAU,iBACb,yBAAKG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,YCDxBC,G,MAFC,SAAAR,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMS,Y,OCW1CC,G,MAXA,SAAAV,GACX,OACI,yBAAKC,UAAU,2BACX,yBAAKA,UAAU,IAAf,2BACA,6BAAMD,EAAMW,OAAOC,WAAnB,KACA,uCAAaZ,EAAMW,OAAOE,MAA1B,iBACab,EAAMW,OAAOG,SAD1B,QCMGC,G,MAXA,WAEX,OACI,4BAAQd,UAAU,UACd,uBAAGe,KAAK,OAAOf,UAAU,yBACrB,0BAAMA,UAAU,uBCKjBgB,G,MAVA,WACX,OACI,yBAAKhB,UAAU,UACX,2CAAgB,6BAAhB,+ECsEGiB,G,kNAhEbC,MAAQ,CACNC,UACAP,MAAO,EACPC,SAAU,EACVO,QAAS,GACTT,WAAY,2B,EAKdT,aAAe,SAAAH,IACiC,IAA1C,EAAKmB,MAAME,QAAQC,SAAStB,EAAMuB,KACpC,EAAKJ,MAAME,QAAQG,KAAKxB,EAAMuB,IAC9B,EAAKE,SAAS,CACZZ,MAAO,EAAKM,MAAMN,MAAQ,EAC1BD,WAAW,2BAET,EAAKO,MAAMN,OAAS,EAAKM,MAAML,UACjC,EAAKW,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,SAAUY,EAAUb,MACpBD,WAAW,+BAKf,EAAKa,SAAS,CACZZ,MAAO,EACPQ,QAAS,GACTT,WAAY,6BAEV,EAAKO,MAAMN,OAAS,EAAKM,MAAML,UACjC,EAAKW,SAAS,CAAEX,SAAU,EAAKK,MAAMN,U,uDAOjC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEF,OAAQgB,KAAKR,QAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,KAEGQ,KAAKR,MAAMC,QAAQQ,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAAWC,KAAI,SAAAC,GAAI,OAC3E,kBAAC,EAAD,CAEE/B,aAAc,EAAKA,aACnBoB,GAAIW,EAAKX,GACTY,IAAKD,EAAKX,GACVhB,MAAO2B,EAAK3B,YAKlB,kBAAC,EAAD,W,GA5DU6B,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8264306.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n  <div className=\"card remove\" onClick={()=> props.clickedImage(props)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n   \n  </div>\n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from 'react';\nimport './NavBar.css'\n\nconst NavBar = props => {\n    return (\n        <nav className=\"navBar navbar-expand-lg\">\n            <div className=\"\"> Bugs Bunny Clicky Game</div>\n            <div>{props.scores.topMessage} </div>\n            <div>Score: {props.scores.score} |\n             Top Score: {props.scores.topScore} </div>\n        </nav>\n    );\n};\n\nexport default NavBar;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => {\n;\n    return (\n        <footer className=\"footer\" >\n            <a href=\"#top\" className=\"btn btn-outline-light\">\n                <span className=\"fa fa-sort-asc\"></span>\n            </a>\n        </footer>\n    );\n};\n\nexport default Footer;","import React from \"react\";\nimport \"./Header.css\"\n\nconst Header = ()=> {\n    return (\n        <div className=\"header\">\n            <p> Clicky Game <br />\n            Click on an image to earn points, but don't click on any more than once!</p>\n\n        </div>\n    );\n};\n\nexport default Header;","\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    friends,\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    topMessage: \"Click an image to begin\"\n  };\n\n \n\n  clickedImage = props => {\n    if (this.state.clicked.includes(props.id) === false) {\n      this.state.clicked.push(props.id);\n      this.setState({\n        score: this.state.score + 1,\n        topMessage:\"You guessed correctly!\",\n      });\n      if (this.state.score >= this.state.topScore) {\n        this.setState((prevState) => ({ \n          topScore: prevState.score,\n          topMessage:\"You guessed correctly!\"\n         }))\n      };\n    }\n    else {\n      this.setState({\n        score: 0,\n        clicked: [],\n        topMessage: \"You guessed incorrectly!\"\n      });\n      if (this.state.score >= this.state.topScore) {\n        this.setState({ topScore: this.state.score })\n      };\n      \n    };\n  };\n\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          scores={this.state}\n        />\n        <Header />\n        <Wrapper>\n\n          {this.state.friends.sort(function(a, b){return 0.5 - Math.random()}).map(item => (\n            <FriendCard\n              // removeFriend={this.removeFriend}\n              clickedImage={this.clickedImage}\n              id={item.id}\n              key={item.id}\n              image={item.image}\n              \n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}